1. 数据库的结构:
此网上平台用到了4个表，分别是：
users, advisors, announcements, 和requests。

第一步，建立数据库：
CREATE DATABASE reimbursement;

第二步，为了支持中文，此项目的文字编码一律使用UTF-8，在此将数据库的编码改为UTF-8:
ALTER DATABASE reimbursement DEFAULT CHARACTER SET 'utf8';

第三步，选择建好的数据库：
USE reimbursement;

第四步，建立4个表：
CREATE TABLE users
(
email VARCHAR(255) NOT NULL,
password VARCHAR(255) NOT NULL,
first_name VARCHAR(255) NOT NULL,
last_name VARCHAR(255) NOT NULL,
id_number VARCHAR(127),
status INT(1) NOT NULL,
PRIMARY KEY (email)
);

CREATE TABLE advisors
(
student_email VARCHAR(255) NOT NULL,
advisor_email VARCHAR(255) NOT NULL,
PRIMARY KEY (student_email),
CONSTRAINT FOREIGN KEY (advisor_email) REFERENCES users(email) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT FOREIGN KEY (student_email) REFERENCES users(email) 
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE announcements
(
announce_id INT NOT NULL AUTO_INCREMENT,
title VARCHAR(511) NOT NULL,
content TEXT NOT NULL,
poster_email VARCHAR(255) NOT NULL,
poster VARCHAR(255) NOT NULL,
date DATETIME NOT NULL,
PRIMARY KEY (announce_id),
CONSTRAINT FOREIGN KEY (poster_email) REFERENCES users(email)
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE requests
(
request_id INT NOT NULL AUTO_INCREMENT,
submitter_name VARCHAR(255),
submitter_id_number VARCHAR(127),
transfered_email VARCHAR(255),
date_start DATE NOT NULL,
date_advisor_agreed DATE,
date_net_report_finished DATE,
date_student_finished DATE,
date_finished DATE,
amount INT NOT NULL,
have_budget INT(1) NOT NULL,
financial_assistant_email VARCHAR(255),
financial_assistant_name VARCHAR(255),
page_number INT NOT NULL,
subject INT NOT NULL,
subject_other VARCHAR(127),
is_special INT(1) NOT NULL,
intel_platform_id INT,
asset_platform_id INT,
have_all_files INT(1) NOT NULL,
contract_company_name VARCHAR(255),
contract_location VARCHAR(127),
contract_bank_number VARCHAR(255),
contract_opener VARCHAR(255),
receipt_same_as_actual INT(1) NOT NULL,
receipt_difference TEXT,
professor_class VARCHAR(255),
professor_name VARCHAR(255),
expanse_number VARCHAR(255),
expanse_name VARCHAR(255),
payment_option INT,
payment_option_other VARCHAR(255),
usage_optional TEXT,
note_optional TEXT,
last_added_note TEXT,
request_status INT(1) NOT NULL,
PRIMARY KEY (request_id),
CONSTRAINT FOREIGN KEY (financial_assistant_email) REFERENCES users(email) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT FOREIGN KEY (transfered_email) REFERENCES users(email)
ON UPDATE CASCADE
ON DELETE CASCADE
);

表的说明：
---------------------------------------------------------------
users: 存储所有的用户。

email, password为邮箱地址和密码，用来登录。
first_name, last_name为用户的真实姓名。
id_number为学号，只有学生有，教师为空。
status是用户身份。0代表财务主任老师，1代表研究生（财务助理），
    2代表本科生，3代表负责财务助理的老师。
---------------------------------------------------------------
advisors: 存储财务助理与负责老师的关系。

student_email是财务助理的登录邮箱地址。
advisor_email是负责老师的登录邮箱地址。
---------------------------------------------------------------
announcements: 存储所有的公告。

announce_id是自动生成的编号。
title和content是标题和内容。
poster_email和poster是发布人的邮箱地址和姓名。
date是发布时间。
---------------------------------------------------------------
requests: 存储所有的申请。

request_id是自动生成的流水号。
submitter_name和submitter_id_number是申请人的名字和学号。
financial_assistant_email和financial_assistant_name是财务助理的邮箱和名字。
transfered_email是转交给的财务助理的邮箱。如果没有转交则为NULL。
date_start，date_advisor_agreed，date_net_report_finished，
date_student_finished，和date_finished分别为申请开始日期，负责老师同意日期，
网报完成日期，助理完成报销日期，和财务主任填写玩回馈的日期。
amount是总金额。
have_budget代表是否有预算。是为1，否为0。
page_number为申请材料总页数。
subject
subject_other
is_special
intel_platform_id
asset_platform_id
have_all_files
contract_company_name
contract_location
contract_bank_number
contract_opener
receipt_same_as_actual
receipt_difference
professor_class
professor_name
expanse_number
expanse_name
payment_option 
payment_option_other
usage_optional
note_optional
last_added_note
request_status

// request_status:
// 0 -- submitted, need advisor to agree.
// 1 -- advisor agreed, need professor to modify and finish net reporting.
// 2 -- professor finished net reporting, need student to complete.
// 3 -- student completed, professor didn't add comment.
// 4 -- all completed, professor added comment.
// 5 -- advisor didn't agree, reimbursement permanently stopped.
// 6 -- master professor didn't agree, reimbursement permanenetly stopped.
// 7 -- student canceled, reimbursement permanently stopped.

第五布，将搜索引擎改为InnoDB。
ALTER TABLE users ENGINE=InnoDB;
ALTER TABLE advisors ENGINE=InnoDB;
ALTER TABLE announcements ENGINE=InnoDB;
ALTER TABLE requests ENGINE=InnoDB;
INSERT INTO users VALUES ('wang103@illinois.edu', md5('tianyi'), '天意', '王', 'A1', 1);

例子--添加用户：
INSERT INTO users VALUES ('wang103uiuc@gmail.com', md5('bailin'), '琳', '柏', '', 0);

INSERT INTO users VALUES ('hypervisorII@hotmail.com', md5('tianyi'), '1', 'student', 'S1', 1);
INSERT INTO users VALUES ('test2@hotmail.com', md5('tianyi'), '2', 'student', 'S1', 1);
INSERT INTO users VALUES ('test3@hotmail.com', md5('tianyi'), '3', 'student', 'S1', 1);
INSERT INTO users VALUES ('test4@hotmail.com', md5('tianyi'), '4', 'student', 'S1', 1);
INSERT INTO users VALUES ('test5@hotmail.com', md5('tianyi'), '5', 'student', 'S1', 1);
INSERT INTO users VALUES ('test6@hotmail.com', md5('tianyi'), '6', 'student', 'S1', 1);
INSERT INTO users VALUES ('test7@hotmail.com', md5('tianyi'), '7', 'student', 'S1', 1);

INSERT INTO users VALUES ('wang103@uiuc.edu', md5('tianyi'), '1', 'professor', '', 3);
INSERT INTO users VALUES ('test22@hotmail.com', md5('tianyi'), '2', 'professor', '', 3);
INSERT INTO users VALUES ('test33@hotmail.com', md5('tianyi'), '3', 'professor', '', 3);
INSERT INTO users VALUES ('test44@hotmail.com', md5('tianyi'), '4', 'professor', '', 3);
INSERT INTO users VALUES ('test55@hotmail.com', md5('tianyi'), '5', 'professor', '', 3);
INSERT INTO users VALUES ('test66@hotmail.com', md5('tianyi'), '6', 'professor', '', 3);
INSERT INTO users VALUES ('test77@hotmail.com', md5('tianyi'), '7', 'professor', '', 3);

例子--添加财务助理和负责老师的关系：
INSERT INTO advisors VALUES ('hypervisorII@hotmail.com', 'wang103@uiuc.edu');
INSERT INTO advisors VALUES ('test2@hotmail.com', 'test22@hotmail.com');
INSERT INTO advisors VALUES ('test3@hotmail.com', 'test33@hotmail.com');
INSERT INTO advisors VALUES ('test4@hotmail.com', 'test44@hotmail.com');
INSERT INTO advisors VALUES ('test5@hotmail.com', 'test55@hotmail.com');
INSERT INTO advisors VALUES ('test6@hotmail.com', 'test66@hotmail.com');
INSERT INTO advisors VALUES ('test7@hotmail.com', 'test77@hotmail.com');

2. 界面简介：
总共有4个主界面，分别为首页，提交界面，处理界面，及查看界面。
    'submit' is mainly used by students to submit new reimbursement.
    'process' is mainly used by professors to process reimbursement submitted
        by students.
    'check' is used by everyone to check all sort of reimburments, such as:
        submitted by me
        processed by me
        other reimbursement requests
    
    Identity will be checked before any action can be granted.

4. config.php contains sensitive information, and should be placed outside the
    public directory. It's permission should be set to something like 644.

5. Only professors can modify the announcement list.

6. Three-column HTML: http://alistapart.com/article/holygrail

7. An unique number is generated for each request.

8. Seven student accounts, each corresponds to a professor, and one master
    professor.

9. Student and his/her advisor can only see the student's submission. Master
    professor can see all.

10. Support one advisor to multiple students.

11. Links to two other platforms are stored in config.php.

12. Equipment, material, software, and mayby other are special subject.

13. Professors can terminate a request.

14. Students can delete request before mater professor processed it.

15. There is a email reminding system.
